/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package ca.uvic.seng330.ex3;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;

class ObservationTests {
    private ObservationRepository observations;
    private Observation observation1;
    private Observation observation2;
    private Observation observation3;

    @BeforeEach
    void before() {

        SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");

        try {
            observation1 = new Observation();
            observation1.setSightingTime(format.parse("2020-10-01")); //2020-10-1
            observation1.setObservationId(1);
            observation2 = new Observation();
            observation2.setSightingTime(format.parse("2020-09-01")); //2020-9-1
            observation2.setObservationId(2);
            observation3 = new Observation();
            observation3.setSightingTime(format.parse("2020-09-05")); //2020-9-5
            observation3.setObservationId(3);
        } catch (Exception e) {
            System.out.println(e);
        }
        List<Observation> list = new ArrayList<>();
        list.add(observation1);
        list.add(observation3);
        list.add(observation2);

        observations = new ObservationRepository(list);

    }

    @Test
    void sortObservationRepositoryByDate() {
        List<Observation> list = new ArrayList<>();
        list.add(observation2);
        list.add(observation3);
        list.add(observation1);
        observations.sortByDate();
        assertEquals(list, observations.getObservations());
    }

    @Test
    void sortEmptyObservationRepositoryByDate() {
        // Test for empty observations collection
        ObservationRepository observations = new ObservationRepository();
        try {
            observations.sortByDate();
        } catch (Exception e) {
            fail();
        }
    }

    @Test
    void sortObservationRepositoryById() {
        List<Observation> list = new ArrayList<>();
        list.add(observation1);
        list.add(observation2);
        list.add(observation3);
        observations.sortById();
        assertEquals(list, observations.getObservations());

        List<Observation> list2 = new ArrayList<>();
        list2.add(observation1);
        list2.add(observation3);
        list2.add(observation2);
        assertNotEquals(list2, observations.getObservations());
    }

    @Test
    void sortEmptyObservationRepositoryById() {
        // Test for empty observations collection
        ObservationRepository observations = new ObservationRepository();
        try {
            observations.sortById();
        } catch (Exception e) {
            fail();
        }
    }

    @Test
    void searchByDate() {
        SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
        Date date = new Date();
        try {
            date = format.parse("2020-09-01");
        } catch (Exception e) {
            System.out.println(e);
            fail();
        }
        List<Observation> list = new ArrayList<>();
        list.add(observation1);
        List<Observation> search = new ArrayList<>();
        try {
            search = observations.getByDate(date);
        } catch (Exception e) {
            fail();
        }
        assertEquals(1, search.size());
        assertEquals(date, search.get(0).getSightingTime());
    }

    @Test
    void searchById() {
        Observation search = null;
        long SEARCH_OBSERVATION_ID = 1;
        try {
            search = observations.getById(SEARCH_OBSERVATION_ID);
        } catch (Exception e) {
            fail();
        }
        assertEquals(SEARCH_OBSERVATION_ID, search.getObservationId());
    }
}
